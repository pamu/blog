<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Functional programming</title>
    <link href="https://haskworks.com/feed.xml" rel="self" />
    <link href="https://haskworks.com" />
    <id>https://haskworks.com/feed.xml</id>
    <author>
        <name>nagarjuna pamu</name>
        <email>nagarjuna.pamu@gmail.com</email>
    </author>
    <updated>2018-05-18T00:00:00Z</updated>
    <entry>
    <title>Solving a coding task in Haskell</title>
    <link href="https://haskworks.com/posts/2018-05-18-solving-simple-coding-problem-in-haskell.html" />
    <id>https://haskworks.com/posts/2018-05-18-solving-simple-coding-problem-in-haskell.html</id>
    <published>2018-05-18T00:00:00Z</published>
    <updated>2018-05-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>One of my friends who recently gave a online coding test shared a simple programming task which he encountered. Though he solved the problem correctly his solution was timing out for large inputs. Lets see the problem and give a better solution and analyze the problem more.</p>
<h3 id="problem-statement"><strong>Problem statement</strong></h3>
<p>There are <code>n</code> candies to consume to start with. Only <code>a</code> candies can be consumed at once. When <code>a</code> candies are consumed <code>b</code> candies are generated. User tries to consume all the candies. The question is weather its possible to consume all the candies. If possible How many candies are consumed by the user until he finishes all the candies. If number of candies left is less than <code>a</code> then all candies can be consumed and no generation happens. Generation of candies happens only when <code>a</code> candies are consumed.</p>
<p>For example:</p>
<ol type="1">
<li><p>There are <code>3</code> candies to start with <code>n = 3</code></p></li>
<li><p>Number of candies person will be able to consume at once is <code>2</code> i.e <code>a = 2</code>.</p></li>
<li><p>Number of candies that get generated when <code>2</code> candies are consumed is <code>1</code> i.e <code>b = 1</code></p></li>
</ol>
<p>Now, number of candies will the person consumes when initial count is 3, consumption rate is 2 at once and generation rate is 1.</p>
<ul>
<li><p><em>Step 1:</em></p>
<ul>
<li><em>Initial count = 3</em></li>
<li><em>Consumed at once = 2</em></li>
<li><em>Generated = 1</em></li>
<li><em>Left = 3 - 2 + 1 = 2</em></li>
<li><em>Total consumed = 2</em></li>
</ul></li>
<li><p><em>Step 2:</em></p>
<ul>
<li><em>Initial count = 2 (left over in step 1)</em></li>
<li><em>Consumed at once = 2 (always consumed is two if 2 or more than 2 are available)</em></li>
<li><em>Generated = 1 (generated is always 1)</em></li>
<li><em>Left = 2 - 2 + 1 = 1</em></li>
<li><em>Total consumed = 2 + 2 = 4</em></li>
</ul></li>
<li><p>Step 3:</p>
<p><em>As left over is less than 2 (consumed at once) no candy is generated.</em></p>
<ul>
<li><em>Initial count = 1</em></li>
<li><em>Consumed at once = 1 (consumed is 1 as only 1 candy is left)</em></li>
<li><em>Generated = 0 (no generation happens)</em></li>
<li><em>Left = 1 - 1 = 0</em></li>
<li><em>Total consumed = 2 + 2 + 1 = 5</em></li>
</ul></li>
</ul>
<p>The answer is <code>5</code>. That means if starting candies count is 3. If 2 candies are consumed at once while generating 1 candy for every 2 candies consumption. Then in total person might have consumed <code>5</code> candies.</p>
<h3 id="lets-write-a-program-to-compute-the-same."><strong>Lets write a program to compute the same.</strong></h3>
<p>Lets create method which simulates eating <code>a</code> number of candies only and then gives out left overs. For this lets create a record which stores left over candies and consumed candies</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Result</span> <span class="fu">=</span> <span class="dt">Result</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2">  {<span class="ot"> left ::</span> <span class="dt">Integer</span> <span class="co">-- represents left over candies</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3">  ,<span class="ot"> ate ::</span> <span class="dt">Integer</span> <span class="co">-- represents consumed candies</span></a>
<a class="sourceLine" id="cb1-4" data-line-number="4">  } <span class="kw">deriving</span> (<span class="dt">Show</span>)</a></code></pre></div>
<p><em>Now, after single pass ie, after consuming <code>a</code> number of candies <code>b</code> number of candies get generated</em></p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="ot">eatOnce ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Result</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2">eatOnce initialCount generated oneTime <span class="co">-- oneTime is nothing but `a` value</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3">  <span class="fu">|</span> initialCount <span class="fu">&lt;</span> oneTime <span class="fu">=</span> <span class="dt">Result</span> {left <span class="fu">=</span> <span class="dv">0</span>, ate <span class="fu">=</span> initialCount}</a>
<a class="sourceLine" id="cb2-4" data-line-number="4">  <span class="fu">|</span> initialCount <span class="fu">==</span> oneTime <span class="fu">=</span> <span class="dt">Result</span> {left <span class="fu">=</span> <span class="dv">1</span>, ate <span class="fu">=</span> initialCount}</a>
<a class="sourceLine" id="cb2-5" data-line-number="5">  <span class="fu">|</span> initialCount <span class="fu">&gt;</span> oneTime <span class="fu">=</span> <span class="dt">Result</span> {left <span class="fu">=</span> initialCount <span class="fu">-</span> oneTime <span class="fu">+</span> generated, ate <span class="fu">=</span> oneTime}</a></code></pre></div>
<p><em>Then, repeat <code>eatOnce</code> until all the candies are completed.</em></p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="ot">candiesConsumed ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2">candiesConsumed a b <span class="fu">=</span> candiesConsumedHelper a b <span class="dv">0</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-4" data-line-number="4"><span class="ot">    candiesConsumedHelper ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5">    candiesConsumedHelper amount oneTime consumed</a>
<a class="sourceLine" id="cb3-6" data-line-number="6">      <span class="fu">|</span> amount <span class="fu">==</span> <span class="dv">0</span> <span class="fu">=</span> consumed</a>
<a class="sourceLine" id="cb3-7" data-line-number="7">      <span class="fu">|</span> otherwise <span class="fu">=</span></a>
<a class="sourceLine" id="cb3-8" data-line-number="8">        <span class="kw">let</span> result <span class="fu">=</span> eatOnce amount oneTime</a>
<a class="sourceLine" id="cb3-9" data-line-number="9">        <span class="kw">in</span> candiesConsumedHelper (left result) oneTime (consumed <span class="fu">+</span> ate result)</a></code></pre></div>
<p><em>when <code>amount</code> becomes zero return the consumed value else keep eating using <code>eatOnce</code></em></p>
<h3 id="putting-everything-in-one-program"><em>Putting everything in one program</em></h3>
<p><em>Candies.hs</em></p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Debug.Trace</span> (trace)</a>
<a class="sourceLine" id="cb4-2" data-line-number="2"></a>
<a class="sourceLine" id="cb4-3" data-line-number="3"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb4-4" data-line-number="4">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb4-5" data-line-number="5">  <span class="kw">let</span> result <span class="fu">=</span> candiesConsumed <span class="dv">1346</span> <span class="dv">10</span></a>
<a class="sourceLine" id="cb4-6" data-line-number="6">  putStrLn <span class="fu">$</span> <span class="st">&quot;result &quot;</span> <span class="fu">++</span> show result</a>
<a class="sourceLine" id="cb4-7" data-line-number="7">  return ()</a>
<a class="sourceLine" id="cb4-8" data-line-number="8"></a>
<a class="sourceLine" id="cb4-9" data-line-number="9"><span class="kw">data</span> <span class="dt">Result</span> <span class="fu">=</span> <span class="dt">Result</span></a>
<a class="sourceLine" id="cb4-10" data-line-number="10">  {<span class="ot"> left ::</span> <span class="dt">Integer</span></a>
<a class="sourceLine" id="cb4-11" data-line-number="11">  ,<span class="ot"> ate ::</span> <span class="dt">Integer</span></a>
<a class="sourceLine" id="cb4-12" data-line-number="12">  } <span class="kw">deriving</span> (<span class="dt">Show</span>)</a>
<a class="sourceLine" id="cb4-13" data-line-number="13"></a>
<a class="sourceLine" id="cb4-14" data-line-number="14"><span class="ot">eatOnce ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Result</span></a>
<a class="sourceLine" id="cb4-15" data-line-number="15">eatOnce existing oneTime</a>
<a class="sourceLine" id="cb4-16" data-line-number="16">  <span class="fu">|</span> existing <span class="fu">&lt;</span> oneTime <span class="fu">=</span> <span class="dt">Result</span> {left <span class="fu">=</span> <span class="dv">0</span>, ate <span class="fu">=</span> existing}</a>
<a class="sourceLine" id="cb4-17" data-line-number="17">  <span class="fu">|</span> existing <span class="fu">==</span> oneTime <span class="fu">=</span> <span class="dt">Result</span> {left <span class="fu">=</span> <span class="dv">1</span>, ate <span class="fu">=</span> existing}</a>
<a class="sourceLine" id="cb4-18" data-line-number="18">  <span class="fu">|</span> otherwise <span class="fu">=</span> <span class="dt">Result</span> {left <span class="fu">=</span> existing <span class="fu">-</span> oneTime <span class="fu">+</span> <span class="dv">1</span>, ate <span class="fu">=</span> oneTime}</a>
<a class="sourceLine" id="cb4-19" data-line-number="19"></a>
<a class="sourceLine" id="cb4-20" data-line-number="20"><span class="ot">candiesConsumed ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></a>
<a class="sourceLine" id="cb4-21" data-line-number="21">candiesConsumed a b <span class="fu">=</span> candiesConsumedHelper a b <span class="dv">0</span></a>
<a class="sourceLine" id="cb4-22" data-line-number="22">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-23" data-line-number="23"><span class="ot">    candiesConsumedHelper ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></a>
<a class="sourceLine" id="cb4-24" data-line-number="24">    candiesConsumedHelper amount oneTime consumed</a>
<a class="sourceLine" id="cb4-25" data-line-number="25">      <span class="fu">|</span> amount <span class="fu">==</span> <span class="dv">0</span> <span class="fu">=</span> consumed</a>
<a class="sourceLine" id="cb4-26" data-line-number="26">      <span class="fu">|</span> otherwise <span class="fu">=</span></a>
<a class="sourceLine" id="cb4-27" data-line-number="27">        <span class="kw">let</span> result <span class="fu">=</span> eatOnce amount oneTime</a>
<a class="sourceLine" id="cb4-28" data-line-number="28">            newConsumed <span class="fu">=</span></a>
<a class="sourceLine" id="cb4-29" data-line-number="29">              candiesConsumedHelper</a>
<a class="sourceLine" id="cb4-30" data-line-number="30">                (left result)</a>
<a class="sourceLine" id="cb4-31" data-line-number="31">                oneTime</a>
<a class="sourceLine" id="cb4-32" data-line-number="32">                (consumed <span class="fu">+</span> ate result)</a>
<a class="sourceLine" id="cb4-33" data-line-number="33">        <span class="kw">in</span> trace</a>
<a class="sourceLine" id="cb4-34" data-line-number="34">             (<span class="st">&quot;step: amount: &quot;</span> <span class="fu">++</span> show amount <span class="fu">++</span> <span class="st">&quot; consumed: &quot;</span> <span class="fu">++</span> show consumed)</a>
<a class="sourceLine" id="cb4-35" data-line-number="35">             newConsumed</a></code></pre></div>
<p><em>See <code>trace</code>, used in the code for debugging purpose, to know the state of variable while the program is executing</em></p>
<p><em>Here is how trace looks like</em></p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1">  <span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">:</span>t trace</a>
<a class="sourceLine" id="cb5-2" data-line-number="2"><span class="ot">  trace ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</a></code></pre></div>
<p><em><code>trace</code> is very helpful to know the state of the program while running. If simple <code>print</code> or <code>putStrLn</code> is used, it will introduce <code>IO</code> and program loses the simplicity very quickly.</em></p>
<p><strong>Warning:</strong> <strong><code>trace</code> must not be used in production code. Its for debugging purposes only.</strong></p>
<h3 id="lets-now-run-the-program-for-various-input-sizes"><em>Lets now run the program for various input sizes</em></h3>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="dt">GHCi</span>, version <span class="fl">8.2</span><span class="fu">.</span><span class="dv">2</span><span class="fu">:</span> http<span class="fu">://</span>www<span class="fu">.</span>haskell<span class="fu">.</span>org<span class="fu">/</span>ghc<span class="fu">/</span>  <span class="fu">:?</span> for help</a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>set <span class="fu">+</span>s</a>
<a class="sourceLine" id="cb6-3" data-line-number="3"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>load Candies.hs</a>
<a class="sourceLine" id="cb6-4" data-line-number="4">[<span class="dv">1</span> <span class="kw">of</span> <span class="dv">1</span>] <span class="dt">Compiling</span> <span class="dt">Main</span>             ( Candies.hs, interpreted )</a>
<a class="sourceLine" id="cb6-5" data-line-number="5"><span class="dt">Ok</span>, one <span class="kw">module</span> loaded<span class="fu">.</span></a>
<a class="sourceLine" id="cb6-6" data-line-number="6">(<span class="fl">0.06</span> secs,)</a>
<a class="sourceLine" id="cb6-7" data-line-number="7"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> candiesConsumed <span class="dv">5</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb6-8" data-line-number="8">step<span class="fu">:</span> amount<span class="fu">:</span> <span class="dv">5</span> consumed<span class="fu">:</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb6-9" data-line-number="9">step<span class="fu">:</span> amount<span class="fu">:</span> <span class="dv">3</span> consumed<span class="fu">:</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb6-10" data-line-number="10">step<span class="fu">:</span> amount<span class="fu">:</span> <span class="dv">1</span> consumed<span class="fu">:</span> <span class="dv">6</span></a>
<a class="sourceLine" id="cb6-11" data-line-number="11"><span class="dv">7</span></a>
<a class="sourceLine" id="cb6-12" data-line-number="12">(<span class="fl">0.01</span> secs, <span class="dv">93</span>,<span class="dv">232</span> bytes)</a>
<a class="sourceLine" id="cb6-13" data-line-number="13"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> candiesConsumed <span class="dv">3</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb6-14" data-line-number="14">step<span class="fu">:</span> amount<span class="fu">:</span> <span class="dv">3</span> consumed<span class="fu">:</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb6-15" data-line-number="15">step<span class="fu">:</span> amount<span class="fu">:</span> <span class="dv">2</span> consumed<span class="fu">:</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb6-16" data-line-number="16">step<span class="fu">:</span> amount<span class="fu">:</span> <span class="dv">1</span> consumed<span class="fu">:</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb6-17" data-line-number="17"><span class="dv">5</span></a>
<a class="sourceLine" id="cb6-18" data-line-number="18">(<span class="fl">0.00</span> secs, <span class="dv">92</span>,<span class="dv">856</span> bytes)</a>
<a class="sourceLine" id="cb6-19" data-line-number="19"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> candiesConsumed <span class="dv">13123231</span> <span class="dv">10</span></a>
<a class="sourceLine" id="cb6-20" data-line-number="20">step<span class="fu">:</span> amount<span class="fu">:</span> <span class="dv">13123231</span> consumed<span class="fu">:</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb6-21" data-line-number="21">step<span class="fu">:</span> amount<span class="fu">:</span> <span class="dv">13123222</span> consumed<span class="fu">:</span> <span class="dv">10</span></a>
<a class="sourceLine" id="cb6-22" data-line-number="22">step<span class="fu">:</span> amount<span class="fu">:</span> <span class="dv">13123213</span> consumed<span class="fu">:</span> <span class="dv">20</span></a>
<a class="sourceLine" id="cb6-23" data-line-number="23">step<span class="fu">:</span> amount<span class="fu">:</span> <span class="dv">13123204</span> consumed<span class="fu">:</span> <span class="dv">30</span></a>
<a class="sourceLine" id="cb6-24" data-line-number="24"><span class="co">-- Very large output</span></a></code></pre></div>
<p>From the third input its clear that this solution takes too long for larger inputs.</p>
<p>For input <code>candiesConsumed 2 1</code> program never exits. Why?</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="dt">GHCi</span>, version <span class="fl">8.2</span><span class="fu">.</span><span class="dv">2</span><span class="fu">:</span> http<span class="fu">://</span>www<span class="fu">.</span>haskell<span class="fu">.</span>org<span class="fu">/</span>ghc<span class="fu">/</span>  <span class="fu">:?</span> for help</a>
<a class="sourceLine" id="cb7-2" data-line-number="2"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>set <span class="fu">+</span>s</a>
<a class="sourceLine" id="cb7-3" data-line-number="3"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>load Candies.hs</a>
<a class="sourceLine" id="cb7-4" data-line-number="4">[<span class="dv">1</span> <span class="kw">of</span> <span class="dv">1</span>] <span class="dt">Compiling</span> <span class="dt">Main</span>             ( Candies.hs, interpreted )</a>
<a class="sourceLine" id="cb7-5" data-line-number="5"><span class="dt">Ok</span>, one <span class="kw">module</span> loaded<span class="fu">.</span></a>
<a class="sourceLine" id="cb7-6" data-line-number="6">(<span class="fl">0.06</span> secs,)</a>
<a class="sourceLine" id="cb7-7" data-line-number="7"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> candiesConsumed <span class="dv">2</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb7-8" data-line-number="8"><span class="co">-- program never exits</span></a></code></pre></div>
<p><em>Here the consumption rate is <code>1</code> and also production rate is also <code>1</code>. So, amount of candies will never become 0.</em></p>
<p><strong>Production must be always be less than consumption for this program to exit.</strong></p>
<h3 id="making-the-candies-consumption-faster"><em>Making the candies consumption faster</em></h3>
<p><em>This method can be made faster by division method.</em></p>
<p><em>For example:</em></p>
<ol type="1">
<li><em>Initial amount = 6</em></li>
<li><em>Consumption = 3 and generation = 1</em></li>
<li><em>5 can be represented as 3 + 2 + 1</em></li>
<li><em>3 consumed, 1 generated =&gt; In 3 + 2 + 1 replace 3 with 1, now its becomes 1 + 2 + 1</em></li>
<li><em>Write 1 + 2 + 1 in terms of 3 and then again repeat the process of replacing 3 with 1</em></li>
<li><em>3 + 1 when consumed 3 generated 1, sum becomes 1 + 1</em></li>
<li><em>As 2 is less than 3 .. 2 will be consumed.</em></li>
<li><em>In total 3 + 3 + 2 = 8</em></li>
</ol>
<p><em>That means,</em></p>
<ol type="1">
<li><code>newConsumed = consumed + (div amount consumption) * consumption</code></li>
<li><code>newAmount = amount + (div amount consumption) * generated</code></li>
</ol>
<p><em>Expressing above formuals in Haskell</em></p>
<p><em>FasterCandies.hs</em></p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Debug.Trace</span> (trace)</a>
<a class="sourceLine" id="cb8-2" data-line-number="2"></a>
<a class="sourceLine" id="cb8-3" data-line-number="3"><span class="ot">candies ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></a>
<a class="sourceLine" id="cb8-4" data-line-number="4">candies a b <span class="fu">=</span> candiesHelper a b <span class="dv">1</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb8-5" data-line-number="5">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-6" data-line-number="6"><span class="ot">    candiesHelper ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></a>
<a class="sourceLine" id="cb8-7" data-line-number="7">    candiesHelper amount oneTime generated consumed</a>
<a class="sourceLine" id="cb8-8" data-line-number="8">      <span class="fu">|</span> oneTime <span class="fu">&lt;</span> generated <span class="fu">=</span></a>
<a class="sourceLine" id="cb8-9" data-line-number="9">        error</a>
<a class="sourceLine" id="cb8-10" data-line-number="10">          <span class="st">&quot;consumption must be greater than generation for candies to converge.&quot;</span></a>
<a class="sourceLine" id="cb8-11" data-line-number="11">      <span class="fu">|</span> amount <span class="fu">==</span> <span class="dv">0</span> <span class="fu">=</span> consumed</a>
<a class="sourceLine" id="cb8-12" data-line-number="12">      <span class="fu">|</span> amount <span class="fu">&lt;=</span> oneTime <span class="fu">=</span> amount <span class="fu">+</span> consumed</a>
<a class="sourceLine" id="cb8-13" data-line-number="13">      <span class="fu">|</span> otherwise <span class="fu">=</span></a>
<a class="sourceLine" id="cb8-14" data-line-number="14">        <span class="kw">let</span> multiples <span class="fu">=</span> div amount oneTime</a>
<a class="sourceLine" id="cb8-15" data-line-number="15">            newAmount <span class="fu">=</span> multiples <span class="fu">*</span> generated <span class="fu">+</span> (amount <span class="fu">-</span> multiples <span class="fu">*</span> oneTime)</a>
<a class="sourceLine" id="cb8-16" data-line-number="16">            newConsumed <span class="fu">=</span> multiples <span class="fu">*</span> oneTime</a>
<a class="sourceLine" id="cb8-17" data-line-number="17">        <span class="kw">in</span> candiesHelper newAmount oneTime generated (consumed <span class="fu">+</span> newConsumed)</a></code></pre></div>
<p><em>Trying on REPL</em></p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">:</span>load FasterCandies.hs</a>
<a class="sourceLine" id="cb9-2" data-line-number="2">[<span class="dv">1</span> <span class="kw">of</span> <span class="dv">1</span>] <span class="dt">Compiling</span> <span class="dt">Main</span>             ( FasterCandies.hs, interpreted )</a>
<a class="sourceLine" id="cb9-3" data-line-number="3"><span class="dt">Ok</span>, one <span class="kw">module</span> loaded<span class="fu">.</span></a>
<a class="sourceLine" id="cb9-4" data-line-number="4"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> candies <span class="dv">4</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb9-5" data-line-number="5"><span class="dv">5</span></a>
<a class="sourceLine" id="cb9-6" data-line-number="6"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> candies <span class="dv">3</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb9-7" data-line-number="7"><span class="dv">5</span></a>
<a class="sourceLine" id="cb9-8" data-line-number="8"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> candies <span class="dv">7</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb9-9" data-line-number="9"><span class="dv">10</span></a>
<a class="sourceLine" id="cb9-10" data-line-number="10"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">:</span>set <span class="fu">+</span>s</a>
<a class="sourceLine" id="cb9-11" data-line-number="11"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> candies <span class="dv">32232</span> <span class="dv">10</span></a>
<a class="sourceLine" id="cb9-12" data-line-number="12"><span class="dv">35813</span></a>
<a class="sourceLine" id="cb9-13" data-line-number="13">(<span class="fl">0.00</span> secs, <span class="dv">71</span>,<span class="dv">992</span> bytes)</a>
<a class="sourceLine" id="cb9-14" data-line-number="14"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> candies <span class="dv">322343223422</span> <span class="dv">10</span></a>
<a class="sourceLine" id="cb9-15" data-line-number="15"><span class="dv">358159137135</span></a>
<a class="sourceLine" id="cb9-16" data-line-number="16">(<span class="fl">0.00</span> secs, <span class="dv">79</span>,<span class="dv">600</span> bytes)</a></code></pre></div>
<p><em>Now, the code is quite faster than the previous one. Also the case in which consumption is lesser than or equal to production is patched.</em></p>]]></summary>
</entry>
<entry>
    <title>Haskell project setup using stack.</title>
    <link href="https://haskworks.com/posts/2018-05-11-haskell-project-setup-using-stack.html" />
    <id>https://haskworks.com/posts/2018-05-11-haskell-project-setup-using-stack.html</id>
    <published>2018-05-11T00:00:00Z</published>
    <updated>2018-05-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h3 id="requirements">Requirements</h3>
<ul>
<li>Stack
<ul>
<li><a href="https://docs.haskellstack.org/en/stable/README/">Here</a> are instructions to install stack.</li>
</ul></li>
</ul>
<h3 id="setting-up-new-haskell-project-using-stack">Setting up new Haskell project using Stack</h3>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb1-1" data-line-number="1">    <span class="ex">stack</span> new <span class="op">&lt;</span>project name<span class="op">&gt;</span></a></code></pre></div>
<p>Lets name the project <code>haskworks</code>. So the command to setup the haskell project called <code>haskworks</code> becomes</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb2-1" data-line-number="1">    <span class="ex">stack</span> new haskworks</a></code></pre></div>
<p>Executing the above project generates a folder named <code>haskworks</code> which contains source code and build files.</p>
<h3 id="haskell-project-structure">Haskell project structure</h3>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb3-1" data-line-number="1">[<span class="ex">haskworks</span>] tree                                                               </a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="ex">.</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3">├── <span class="ex">ChangeLog.md</span></a>
<a class="sourceLine" id="cb3-4" data-line-number="4">├── <span class="ex">LICENSE</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5">├── <span class="ex">README.md</span></a>
<a class="sourceLine" id="cb3-6" data-line-number="6">├── <span class="ex">Setup.hs</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7">├── <span class="ex">app</span></a>
<a class="sourceLine" id="cb3-8" data-line-number="8">│   └── <span class="ex">Main.hs</span></a>
<a class="sourceLine" id="cb3-9" data-line-number="9">├── <span class="ex">haskworks.cabal</span></a>
<a class="sourceLine" id="cb3-10" data-line-number="10">├── <span class="ex">package.yaml</span></a>
<a class="sourceLine" id="cb3-11" data-line-number="11">├── <span class="ex">src</span></a>
<a class="sourceLine" id="cb3-12" data-line-number="12">│   └── <span class="ex">Lib.hs</span></a>
<a class="sourceLine" id="cb3-13" data-line-number="13">├── <span class="ex">stack.yaml</span></a>
<a class="sourceLine" id="cb3-14" data-line-number="14">└── <span class="bu">test</span></a>
<a class="sourceLine" id="cb3-15" data-line-number="15">    └── <span class="ex">Spec.hs</span></a>
<a class="sourceLine" id="cb3-16" data-line-number="16"></a>
<a class="sourceLine" id="cb3-17" data-line-number="17"><span class="ex">3</span> directories, 10 files</a></code></pre></div>
<p><em>Here are the important files and folders to note</em></p>
<ul>
<li>Folders
<ol type="1">
<li>app
<ul>
<li>Code for executable (contains <code>Main.hs</code>)</li>
</ul></li>
<li>src
<ul>
<li>Library code. Exposes modules as a part of library. Generally it is a good practice to separate code into executable code and library code. Library code can be separated for re-use in another project</li>
</ul></li>
<li>test
<ul>
<li>Folder for all tests contains <code>main</code> function for indicating the starting point of the tests.</li>
</ul></li>
</ol></li>
<li>Files
<ol type="1">
<li>package.yaml</li>
<li>haskworks.cabal
<ul>
<li>As package.yaml is present haskworks.cabal file is auto generated from the package.yaml file contents.</li>
<li>When stack build or install is launched .cabal file is auto generated from the package.yaml</li>
<li><code>package.yaml</code> file exists for convinience. Only cabal file with <code>package.yaml</code> file can also be used for building the haskell project.</li>
<li>Hpack (which stack uses internally) interprets <code>package.yaml</code> file and generates <code>haskworks.cabal</code> file</li>
<li>Here are the important points why Hpack configuration <code>package.yaml</code> is used
<ul>
<li>The guiding design principles for Hpack are:
<ul>
<li>Don’t require the user to state the obvious, make sensible assumptions by default</li>
<li>Give the user 100% control when needed</li>
<li>Don’t require the user to repeat things, facilitate DRYness</li>
</ul></li>
</ul></li>
</ul></li>
<li>stack.yaml
<ul>
<li><code>haskworks.cabal</code> is the real configuration file which is required for
<ul>
<li>specifying library dependencies and their versions.
<ul>
<li>Note that every library has a version.</li>
<li>Some library version combinations may not be compatible with each other.</li>
<li>Stack (which interprets stack.yaml) solves this problem with help of resolver.</li>
<li>Resolver is a repository which contains are all compatible library versions. So that user can safely mention the library names and ignoring the versions.</li>
<li>Just mention the resolver which you are interested in and all right compatible versions of library are used automatically by stack.</li>
<li>Stack also manages multiple projects but, cabal does not have that capability.</li>
</ul></li>
</ul></li>
</ul></li>
</ol></li>
</ul>
<h3 id="haskworks.cabal-and-package.yaml-files">haskworks.cabal and package.yaml files</h3>
<div class="sourceCode" id="cb4"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="fu">name:</span><span class="at">                haskworks</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"><span class="fu">version:</span><span class="at">             0.1.0.0</span></a>
<a class="sourceLine" id="cb4-3" data-line-number="3"><span class="fu">github:</span><span class="at">              </span><span class="st">&quot;pamu/haskworks&quot;</span></a>
<a class="sourceLine" id="cb4-4" data-line-number="4"><span class="fu">license:</span><span class="at">             BSD3</span></a>
<a class="sourceLine" id="cb4-5" data-line-number="5"><span class="fu">author:</span><span class="at">              </span><span class="st">&quot;Pamu&quot;</span></a>
<a class="sourceLine" id="cb4-6" data-line-number="6"><span class="fu">maintainer:</span><span class="at">          </span><span class="st">&quot;pamu@github.com&quot;</span></a>
<a class="sourceLine" id="cb4-7" data-line-number="7"><span class="fu">copyright:</span><span class="at">           </span><span class="st">&quot;2018 Pamu&quot;</span></a>
<a class="sourceLine" id="cb4-8" data-line-number="8"></a>
<a class="sourceLine" id="cb4-9" data-line-number="9"><span class="fu">extra-source-files:</span></a>
<a class="sourceLine" id="cb4-10" data-line-number="10"><span class="kw">-</span> README.md</a>
<a class="sourceLine" id="cb4-11" data-line-number="11"><span class="kw">-</span> ChangeLog.md</a>
<a class="sourceLine" id="cb4-12" data-line-number="12"></a>
<a class="sourceLine" id="cb4-13" data-line-number="13"><span class="fu">description:</span><span class="at">  Haskell demo project</span></a>
<a class="sourceLine" id="cb4-14" data-line-number="14"></a>
<a class="sourceLine" id="cb4-15" data-line-number="15"><span class="fu">dependencies:</span></a>
<a class="sourceLine" id="cb4-16" data-line-number="16"><span class="kw">-</span> base &gt;= 4.7 &amp;&amp; &lt; 5</a>
<a class="sourceLine" id="cb4-17" data-line-number="17"></a>
<a class="sourceLine" id="cb4-18" data-line-number="18"><span class="fu">library:</span></a>
<a class="sourceLine" id="cb4-19" data-line-number="19">  <span class="fu">source-dirs:</span><span class="at"> src</span></a>
<a class="sourceLine" id="cb4-20" data-line-number="20"></a>
<a class="sourceLine" id="cb4-21" data-line-number="21"><span class="fu">executables:</span></a>
<a class="sourceLine" id="cb4-22" data-line-number="22">  <span class="fu">haskworks-exe:</span></a>
<a class="sourceLine" id="cb4-23" data-line-number="23">    <span class="fu">main:</span><span class="at">                Main.hs</span></a>
<a class="sourceLine" id="cb4-24" data-line-number="24">    <span class="fu">source-dirs:</span><span class="at">         app</span></a>
<a class="sourceLine" id="cb4-25" data-line-number="25">    <span class="fu">ghc-options:</span></a>
<a class="sourceLine" id="cb4-26" data-line-number="26">    <span class="kw">-</span> -threaded</a>
<a class="sourceLine" id="cb4-27" data-line-number="27">    <span class="kw">-</span> -rtsopts</a>
<a class="sourceLine" id="cb4-28" data-line-number="28">    <span class="kw">-</span> -with-rtsopts=-N</a>
<a class="sourceLine" id="cb4-29" data-line-number="29">    <span class="fu">dependencies:</span></a>
<a class="sourceLine" id="cb4-30" data-line-number="30">    <span class="kw">-</span> haskworks</a>
<a class="sourceLine" id="cb4-31" data-line-number="31"></a>
<a class="sourceLine" id="cb4-32" data-line-number="32"><span class="fu">tests:</span></a>
<a class="sourceLine" id="cb4-33" data-line-number="33">  <span class="fu">haskworks-test:</span></a>
<a class="sourceLine" id="cb4-34" data-line-number="34">    <span class="fu">main:</span><span class="at">                Spec.hs</span></a>
<a class="sourceLine" id="cb4-35" data-line-number="35">    <span class="fu">source-dirs:</span><span class="at">         test</span></a>
<a class="sourceLine" id="cb4-36" data-line-number="36">    <span class="fu">ghc-options:</span></a>
<a class="sourceLine" id="cb4-37" data-line-number="37">    <span class="kw">-</span> -threaded</a>
<a class="sourceLine" id="cb4-38" data-line-number="38">    <span class="kw">-</span> -rtsopts</a>
<a class="sourceLine" id="cb4-39" data-line-number="39">    <span class="kw">-</span> -with-rtsopts=-N</a>
<a class="sourceLine" id="cb4-40" data-line-number="40">    <span class="fu">dependencies:</span></a>
<a class="sourceLine" id="cb4-41" data-line-number="41">    <span class="kw">-</span> haskworks</a></code></pre></div>
<h3 id="stack.yaml">Stack.yaml</h3>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="fu">resolver:</span><span class="at"> lts-11.9</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2"></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="fu">packages:</span></a>
<a class="sourceLine" id="cb5-4" data-line-number="4"><span class="kw">-</span> .</a>
<a class="sourceLine" id="cb5-5" data-line-number="5"></a>
<a class="sourceLine" id="cb5-6" data-line-number="6"><span class="fu">extra-deps:</span><span class="at"> </span><span class="kw">[]</span></a></code></pre></div>
<h3 id="building-running-installing-and-testing-haskell-code">building, running, installing and testing Haskell code</h3>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb6-1" data-line-number="1">    <span class="ex">stack</span> build</a></code></pre></div>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb7-1" data-line-number="1">    <span class="ex">stack</span> exec <span class="op">&lt;</span>executable_name<span class="op">&gt;</span></a></code></pre></div>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb8-1" data-line-number="1">    <span class="ex">stack</span> install</a></code></pre></div>
<p>moves to the executable binary to <code>~/.local/bin</code></p>
<div class="sourceCode" id="cb9"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb9-1" data-line-number="1">    <span class="ex">stack</span> test</a></code></pre></div>
<h3 id="rapid-compiler-feeback-mode">Rapid compiler feeback mode</h3>
<div class="sourceCode" id="cb10"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb10-1" data-line-number="1">    <span class="ex">stack</span> build --fast --file-watch</a></code></pre></div>]]></summary>
</entry>
<entry>
    <title>Setting up hakyll static site</title>
    <link href="https://haskworks.com/posts/2018-05-10-setting-up-hakyll-static-site.html" />
    <id>https://haskworks.com/posts/2018-05-10-setting-up-hakyll-static-site.html</id>
    <published>2018-05-10T00:00:00Z</published>
    <updated>2018-05-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h3 id="requirements">Requirements</h3>
<ol type="1">
<li>Git</li>
<li>Stack</li>
</ol>
<h3 id="setup-instructions-on-ubuntu.">Setup instructions on Ubuntu.</h3>
<ol type="1">
<li><p>Git</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb1-1" data-line-number="1">  <span class="fu">sudo</span> apt-get install git</a></code></pre></div></li>
<li><p>Stack</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb2-1" data-line-number="1">  <span class="fu">wget</span> -qO- https://get.haskellstack.org/ <span class="kw">|</span> <span class="fu">sh</span></a></code></pre></div></li>
</ol>
<h3 id="ensure-.localbin-is-on-path">Ensure <code>~/.local/bin</code> is on path</h3>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb3-1" data-line-number="1">  <span class="bu">export</span> <span class="va">PATH=$PATH</span>:~/.local/bin</a></code></pre></div>
<h3 id="stack-installed">Stack installed?</h3>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb4-1" data-line-number="1">  [<span class="ex">blog</span>] stack --version                                            master  ✗ ✭ ✱</a>
<a class="sourceLine" id="cb4-2" data-line-number="2">  <span class="ex">Version</span> 1.6.5 x86_64 hpack-0.20.0</a></code></pre></div>
<h3 id="git-clone-hakyll-template">Git clone hakyll template</h3>
<p><a href="https://github.com/pamu/blog">Here</a> is the template to clone</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb5-1" data-line-number="1">  <span class="fu">git</span> clone git@github.com:pamu/blog.git</a>
<a class="sourceLine" id="cb5-2" data-line-number="2">  <span class="bu">cd</span> blog</a>
<a class="sourceLine" id="cb5-3" data-line-number="3">  <span class="ex">stack</span> install  </a></code></pre></div>
<h3 id="launch-blog">Launch blog</h3>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb6-1" data-line-number="1">  <span class="ex">site</span> watch</a></code></pre></div>
<p>Now open <code>http://localhost:8000</code> on your browser to see the static site. Add markdown files to posts folder of the blog and see the posts added on the blog. For example: In the <code>blog</code> folder, add a sample post</p>
<pre><code>  cd posts
  touch 2018-05-10-sample.md</code></pre>
<h3 id="building-static-site">Building static site</h3>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb8-1" data-line-number="1">  <span class="ex">site</span> clean</a>
<a class="sourceLine" id="cb8-2" data-line-number="2">  <span class="ex">site</span> build</a></code></pre></div>
<p>Static site will be generated in the <code>docs</code> folder</p>
<h3 id="use-github.com-to-deploy-the-static-site">Use Github.com to deploy the static site</h3>
<p>More info available <a href="https://pages.github.com/">here</a></p>
<ol type="1">
<li>Create a repo <code>username.github.io</code> on github</li>
<li>Push docs folder contents to the repo</li>
<li>See the site on <code>username.github.io</code></li>
</ol>]]></summary>
</entry>

</feed>
